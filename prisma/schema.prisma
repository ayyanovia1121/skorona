// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String  @id @default(uuid())
  name                String?
  email               String  @unique
  about               String?
  industryType        String
  role                String
  country             String
  image               String?
  onboardingCompleted Boolean @default(false)

  // Relations
  workspaces   WorkspaceMember[]
  tasks        Task[]
  activities   Activity[]
  comments     Comment[]
  subscription Subscription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id          String  @id @default(uuid())
  name        String
  description String?
  ownerId     String?
  inviteCode  String  @unique

  // Relations
  members  WorkspaceMember[]
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkspaceMember {
  id          String      @id @default(uuid())
  userId      String
  workspaceId String
  accessLevel AccessLevel @default(MEMBER)

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectAccess ProjectAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint for userId and workspaceId
  // This ensures that a user can only be a member of a workspace once
  @@unique([userId, workspaceId])
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String?
  workspaceId String

  // Relations
  workspace     Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks         Task[]
  activities    Activity[]
  comments      Comment[]
  projectAccess ProjectAccess[]
  documentation Documentation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint for workspaceId
  // This ensures that a project can only be created once per workspace
  @@unique([workspaceId])
}

model ProjectAccess {
  id                String  @id @default(uuid())
  workspaceMemberId String
  projectId         String
  hasAccess         Boolean @default(true)

  // Relations
  workspaceMember WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint for workspaceMemberId and projectId
  // This ensures that a workspace member can only have access to a project once
  @@unique([workspaceMemberId, projectId])
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  startDate   DateTime?
  dueDate     DateTime?
  position    Int
  projectId   String
  assigneeId  String?

  //  Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo  User?   @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  attachments File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id          String  @id @default(uuid())
  type        String
  description String?
  projectId   String
  userId      String

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint for projectId and userId
  // This ensures that a user can only have one activity per project
  @@index([projectId, userId])
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  projectId String
  userId    String
  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint for projectId and userId
  // This ensures that a user can only have one comment per project
  @@index([projectId, userId])
}

model Documentation {
  id        String  @id @default(uuid())
  content   String
  projectId String  @unique
  updatedBy String?

  // Relations
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id     String  @id @default(uuid())
  name   String
  url    String
  taskId String?

  // Relations
  type FileType
  task Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Subscription {
  id     String             @id @default(uuid())
  userId String             @unique
  plan   SubscriptionPlan   @default(FREE)
  status SubscriptionStatus @default(ACTIVE)

  // Lemonsquee fields
  lemonsqueezyId    String?
  orderId           String?
  customerId        String?
  currentPeriodEnd  DateTime?
  frequency         String    @default("monthly")
  cancelAtPeriodEnd Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 
  @@index([userId])
}

// Enum Definitions
enum FileType {
  IMAGE
  PDF
}

enum AccessLevel {
  OWNER
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  IN_REVIEW
  BACKLOG
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}
